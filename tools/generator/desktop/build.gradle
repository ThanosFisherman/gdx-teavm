group = project.groupId
version = project.toolCoreVersion

project.ext.mainClassName = "com.github.xpenatan.gdx.html5.generator.Main"
sourceSets.main.java.srcDirs = ["src/main/java/"]

configurations {
    provided
    implementation.extendsFrom provided
}

tasks.register('fromClasses', Jar) {
    from(sourceSets.main.output) {
    }
}

dependencies {
    implementation project(":tools:generator:core")
    implementation "com.badlogicgames.gdx:gdx-platform:$project.gdxVersion:natives-desktop"
    implementation "com.badlogicgames.gdx:gdx-backend-lwjgl:$project.gdxVersion"
}

tasks.register('runGenerator', JavaExec) {
    setGroup("teavm")
    setDescription("Run Generator")
    mainClass.set(project.mainClassName)
    setClasspath(sourceSets.main.runtimeClasspath)

    if (org.gradle.internal.os.OperatingSystem.current() == org.gradle.internal.os.OperatingSystem.MAC_OS) {
        // Required to run on macOS
        jvmArgs += "-XstartOnFirstThread"
    }
}

tasks.register('copyDependencies', Copy) {
    from { configurations.default }
            {
                exclude "core*.jar"
                exclude "jorbis-*.jar"
                exclude "sac-*.jar"
                exclude "validation-api-*.jar"
                exclude "jutils-*.jar"
                exclude "jsinterop-*.jar"
                exclude "jlayer-*.jar"
                exclude "jinput-*.jar"
                exclude "javax.*.jar"
                exclude "gwt-user*.jar"
            }
    into 'build/libs/dependencies'
}

def projectsToCollect = [':tools:generator:desktop', ':tools:generator:core']


//TODO fix dist

tasks.register('dist', Jar) {
    dependsOn([copyDependencies, projectsToCollect.collect { it + ":compileJava" }])
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    manifest {
        attributes(
                'Main-Class': project.mainClassName
        )
    }
    from files(projectsToCollect.collect { project(it).sourceSets.main.output })
    from {
        (configurations.provided).collect
                {
                    it.isDirectory() ? it : zipTree(it)
                }
    }
    with jar
}